// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAuto.EF;

namespace StoreAuto.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221111170413_NewConfiguration")]
    partial class NewConfiguration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreAuto.Models.AvailabilityCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StorageId");

                    b.ToTable("AvailabilityCars");
                });

            modelBuilder.Entity("StoreAuto.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AvailabilityCarId")
                        .HasColumnType("int");

                    b.Property<int>("ColorId")
                        .HasColumnType("int");

                    b.Property<int>("CompleteSetId")
                        .HasColumnType("int");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityCarId")
                        .IsUnique();

                    b.HasIndex("ColorId");

                    b.HasIndex("CompleteSetId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("StoreAuto.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");
                });

            modelBuilder.Entity("StoreAuto.Models.Color", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EngineVolume")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("OrderId");

                    b.ToTable("CompleteSets");
                });

            modelBuilder.Entity("StoreAuto.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("VIN_Number");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[VIN_Number] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("AllInvoices");
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("StoreAuto.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Term")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("StoreAuto.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ClientAddress");

                    b.HasKey("Id");

                    b.ToTable("StorageAuto");
                });

            modelBuilder.Entity("StoreAuto.Models.AvailabilityCar", b =>
                {
                    b.HasOne("StoreAuto.Models.Storage", "Storage")
                        .WithMany("AvailabilityCars")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.HasOne("StoreAuto.Models.AvailabilityCar", "AvailabilityCar")
                        .WithOne("Car")
                        .HasForeignKey("StoreAuto.Models.Car", "AvailabilityCarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.CompleteSet", "CompleteSet")
                        .WithMany("Cars")
                        .HasForeignKey("CompleteSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AvailabilityCar");

                    b.Navigation("Color");

                    b.Navigation("CompleteSet");
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.HasOne("StoreAuto.Models.Model", "Model")
                        .WithMany("CompletedSets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Order", "Order")
                        .WithMany("CompleteSets")
                        .HasForeignKey("OrderId");

                    b.Navigation("Model");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAuto.Models.Invoice", b =>
                {
                    b.HasOne("StoreAuto.Models.Car", "Car")
                        .WithOne("Invoice")
                        .HasForeignKey("StoreAuto.Models.Invoice", "CarId");

                    b.HasOne("StoreAuto.Models.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("StoreAuto.Models.Invoice", "OrderId");

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.HasOne("StoreAuto.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("StoreAuto.Models.AvailabilityCar", b =>
                {
                    b.Navigation("Car");
                });

            modelBuilder.Entity("StoreAuto.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("StoreAuto.Models.Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("StoreAuto.Models.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.Navigation("CompletedSets");
                });

            modelBuilder.Entity("StoreAuto.Models.Order", b =>
                {
                    b.Navigation("CompleteSets");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("StoreAuto.Models.Storage", b =>
                {
                    b.Navigation("AvailabilityCars");
                });
#pragma warning restore 612, 618
        }
    }
}
