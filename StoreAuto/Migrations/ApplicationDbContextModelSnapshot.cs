// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StoreAuto.EF;

namespace StoreAuto.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.11")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("StoreAuto.Models.AvailabilityCar", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("StorageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[CarId] IS NOT NULL");

                    b.HasIndex("StorageId");

                    b.ToTable("AvailabilityCars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            StorageId = 1
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            StorageId = 2
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            StorageId = 3
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BrandName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Country")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandName = "Mercedes-Benz",
                            Country = "Germany"
                        },
                        new
                        {
                            Id = 2,
                            BrandName = "Audi",
                            Country = "Germany"
                        },
                        new
                        {
                            Id = 3,
                            BrandName = "Mercedes-Benz",
                            Country = "Germany"
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ColorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CompleteSetId")
                        .HasColumnType("int");

                    b.Property<bool>("IsCash")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CompleteSetId");

                    b.HasIndex("ColorName", "ColorCode");

                    b.ToTable("Cars");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ColorCode = "12qw",
                            ColorName = "Black",
                            CompleteSetId = 1,
                            IsCash = true
                        },
                        new
                        {
                            Id = 2,
                            ColorCode = "1111",
                            ColorName = "White",
                            CompleteSetId = 2,
                            IsCash = true
                        },
                        new
                        {
                            Id = 3,
                            ColorCode = "1rr1",
                            ColorName = "Black",
                            CompleteSetId = 3,
                            IsCash = false
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Phone")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FirstName = "Igor",
                            LastName = "Radchuk",
                            Phone = 665001701
                        },
                        new
                        {
                            Id = 2,
                            FirstName = "Nazar",
                            LastName = "Shevchuk",
                            Phone = 675001705
                        },
                        new
                        {
                            Id = 3,
                            FirstName = "Petro",
                            LastName = "Romuniuk",
                            Phone = 678801788
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Color", b =>
                {
                    b.Property<string>("ColorName")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ColorCode")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ColorName", "ColorCode")
                        .HasName("PK_NameCode");

                    b.ToTable("Colors");

                    b.HasData(
                        new
                        {
                            ColorName = "Black",
                            ColorCode = "12qw"
                        },
                        new
                        {
                            ColorName = "White",
                            ColorCode = "1111"
                        },
                        new
                        {
                            ColorName = "Black",
                            ColorCode = "1rr1"
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EngineVolume")
                        .HasColumnType("int");

                    b.Property<string>("FuelType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ModelId")
                        .HasColumnType("int");

                    b.Property<int>("ModelYear")
                        .HasColumnType("int");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(18,2)")
                        .HasDefaultValue(25000m);

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("OrderId");

                    b.ToTable("CompleteSets");

                    b.HasCheckConstraint("Price", "Price > 10000 AND Price < 99999999");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EngineVolume = 3,
                            FuelType = "Gasoline",
                            ModelId = 1,
                            ModelYear = 2021,
                            Price = 250000m
                        },
                        new
                        {
                            Id = 2,
                            EngineVolume = 2,
                            FuelType = "Gasoline",
                            ModelId = 2,
                            ModelYear = 2020,
                            OrderId = 1,
                            Price = 200000m
                        },
                        new
                        {
                            Id = 3,
                            EngineVolume = 3,
                            FuelType = "Gasoline",
                            ModelId = 3,
                            ModelYear = 2020,
                            Price = 210000m
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CarId")
                        .HasColumnType("int")
                        .HasColumnName("VIN_Number");

                    b.Property<int>("ClientId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OrderId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_Invoice");

                    b.HasIndex("CarId")
                        .IsUnique()
                        .HasFilter("[VIN_Number] IS NOT NULL");

                    b.HasIndex("ClientId");

                    b.HasIndex("OrderId")
                        .IsUnique()
                        .HasFilter("[OrderId] IS NOT NULL");

                    b.ToTable("AllInvoices");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CarId = 1,
                            ClientId = 1,
                            Date = new DateTime(2022, 11, 16, 21, 11, 53, 860, DateTimeKind.Local).AddTicks(4733)
                        },
                        new
                        {
                            Id = 2,
                            CarId = 2,
                            ClientId = 2,
                            Date = new DateTime(2022, 11, 16, 21, 11, 53, 862, DateTimeKind.Local).AddTicks(236),
                            OrderId = 1
                        },
                        new
                        {
                            Id = 3,
                            CarId = 3,
                            ClientId = 3,
                            Date = new DateTime(2022, 11, 16, 21, 11, 53, 862, DateTimeKind.Local).AddTicks(257)
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BodyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<string>("ModelName")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.ToTable("Models");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BodyType = "Crossover",
                            BrandId = 1,
                            ModelName = "GLS"
                        },
                        new
                        {
                            Id = 2,
                            BodyType = "Universal",
                            BrandId = 2,
                            ModelName = "A6"
                        },
                        new
                        {
                            Id = 3,
                            BodyType = "Sedan",
                            BrandId = 3,
                            ModelName = "CLC"
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOrder")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("Term")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DateOrder = new DateTime(2022, 11, 16, 21, 11, 53, 862, DateTimeKind.Local).AddTicks(936),
                            Term = new DateTime(2022, 12, 6, 0, 0, 0, 0, DateTimeKind.Local)
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.Storage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("ClientAddress");

                    b.HasKey("Id");

                    b.ToTable("StorageAuto");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Shevcenka 5"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Konovaltsa 8"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Dachna 11"
                        });
                });

            modelBuilder.Entity("StoreAuto.Models.AvailabilityCar", b =>
                {
                    b.HasOne("StoreAuto.Models.Car", "Car")
                        .WithOne("AvailabilityCar")
                        .HasForeignKey("StoreAuto.Models.AvailabilityCar", "CarId");

                    b.HasOne("StoreAuto.Models.Storage", "Storage")
                        .WithMany("AvailabilityCars")
                        .HasForeignKey("StorageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.HasOne("StoreAuto.Models.CompleteSet", "CompleteSet")
                        .WithMany("Cars")
                        .HasForeignKey("CompleteSetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Color", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorName", "ColorCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("CompleteSet");
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.HasOne("StoreAuto.Models.Model", "Model")
                        .WithMany("CompletedSets")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Order", "Order")
                        .WithMany("CompleteSets")
                        .HasForeignKey("OrderId");

                    b.Navigation("Model");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAuto.Models.Invoice", b =>
                {
                    b.HasOne("StoreAuto.Models.Car", "Car")
                        .WithOne("Invoice")
                        .HasForeignKey("StoreAuto.Models.Invoice", "CarId");

                    b.HasOne("StoreAuto.Models.Client", "Client")
                        .WithMany("Invoices")
                        .HasForeignKey("ClientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StoreAuto.Models.Order", "Order")
                        .WithOne("Invoice")
                        .HasForeignKey("StoreAuto.Models.Invoice", "OrderId");

                    b.Navigation("Car");

                    b.Navigation("Client");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.HasOne("StoreAuto.Models.Brand", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("StoreAuto.Models.Brand", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("StoreAuto.Models.Car", b =>
                {
                    b.Navigation("AvailabilityCar");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("StoreAuto.Models.Client", b =>
                {
                    b.Navigation("Invoices");
                });

            modelBuilder.Entity("StoreAuto.Models.Color", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("StoreAuto.Models.CompleteSet", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("StoreAuto.Models.Model", b =>
                {
                    b.Navigation("CompletedSets");
                });

            modelBuilder.Entity("StoreAuto.Models.Order", b =>
                {
                    b.Navigation("CompleteSets");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("StoreAuto.Models.Storage", b =>
                {
                    b.Navigation("AvailabilityCars");
                });
#pragma warning restore 612, 618
        }
    }
}
